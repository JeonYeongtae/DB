- 데이터베이스의 KEY

1. 기본키(중요키)
개체 무결성을 가지고 있음.
id를 기본키로 많이 삼는다. id를 통해 조건문을 많이 실행하는데
이 id로 데이터 수정과 삭제 등을 수행하기 때문에 역할이 중요하다.
pw나 name, addr 등의 값들은 id를 통해 값이 종속된다.
not null과 unique의 특징을 내제하고 있다.

2. 후보키
컴럼 값 중에 not null과 unique한 값을 가지고 있어서 
기본키와 비슷한 역할을 수행할 수 있어서
후보키로 설정될 수 있다.
즉, 이 후보키는 기본키를 변경하여 설정될 수 있다.

3. 대체키
기본키로 설정되지 않은 나머지

4. 복합키 
unique하지 않는 컬럼들을 가지고 결합하여 기본키로 활용했을 때
이 키를 복합키라 한다.

5. 외래 키
참조 무결성을 가지고 있음.

6. 유일키
유일한 값만 가지고 있다.
null 값을 가질 수 있다

- 정규화
중구난방한 테이블 데이터를 나눠 정리함.
이상현상을 막기 위해 정규화 과정이 꼬 필요함
'삽입이상, 갱신이상, 삭제이상' 원인 때문에 이상현상이 발생함.

테이블 데이터를 하나로 삽입하는 과정에서 값이 중복되는 현상도 발생함.
이 때문에 분할 작업이 필요함.

정규화 과정은
제 1 정규화==>제 2 정규화 ==>제 3 정규화의 과정을 거친다.

- 정규화 과정
비정규형 릴레이션 (값들이 혼재되어 있음) - () ->
제 1 정규형 릴레이션 - () ->
제 2 정규형 릴레이션 - () ->.....


- 함수 종속 관계
이벤트 참여 릴레이션에 존재하는 함수 종속 관계

y=f(x)
x의 값이 어떤 것이 들어가냐에 따라 y가 달라진다.
예를 들어
y=x+1
일 경우, x의 값이 어떻게 들어가냐에 따라 y가 '종속적'으로 바뀌게 된다.

- 제 1 정규형
테이블 데이터에 예를 들면 '이벤트 참여 릴레이션'이라는 주제로 하고
고객 아이디, 이벤트 번호(ex. E001, E002...), 당첨여부가 있다고 하자
apple 고객 아이디에 당첨여부가 Y, N, Y으로 여러 값이 들어가 있다면
Y, N, Y의 3개 row로 값으로 분리되어야 한다.

+) 제 1 정규형은 만족하지만 이상 현상이 발생하는 릴레이션도 있다.
ex. 고객 아이디 ==> 등급, 고객 아이디 ==> 할인율, 등급 ==> 할인율, 고객 아이디&이벤트 번호 ==>당첨여부
제 1 정규형은 만족하지만, 이벤트 참여 릴레이션에서 함수 종속 관계에 이상 현상이 발생한다.
이럴 때 제 2 정규형을 진행.

- 제 2 정규형 (2NF)
예를 들면 '이벤트 참여 릴레이션'에서 
고객 아이디, 이벤트 번호, 당첨여부, 등급, 할인율에 컬럼 값이 있다고 하면
부분 종속을 분해할 여부가 있음.
고객 릴레이션: '고객 아이디, 이벤트 번호, 당첨 여부', 이벤트 참여 릴레이션: '고객 아이디, 등급, 할인율'로 분해할 수 있음.

+) 하지만 이 과정에서도 '이행적 함수 종속(transitive FD)'으로 이상 현상이 발생한다
ex. 아까 분리했던 고객 릴레이션에서 함수의 종속성을 여러 개 포함하여 이상 현상이 발생할 수 있음.
고객 아이디가 할인율을 종속 시키지만, 등급도 할인율을 종속시키는 현상이 있기 때문이다.
이럴 때 제 3 정규형 진행.

- 제 3 정규형 (3NF)






