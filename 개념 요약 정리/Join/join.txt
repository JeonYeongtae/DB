• Join
inner join, left join, right join으로 구성.

    - inner join과 outer join
    left join과 right join은 outer join으로 구성됨.

    - join의 범위
    inner join은 두 테이블 데이터 사이에 공통된 부분을 의미.
    left join은 두 테이블 데이터 사이에서 왼쪽(코드 명령어 입력상 먼저 입력된 상단 코드) 데이터 범위만 해당.
    right join은 두 테이블 데이터 사이에서 오른쪽(코드 명령어 입력상 나중에 입력된 하단 코드) 데이터 범위만 해당.

    - join 데이터 명명 방법
    select에서 데이터를 출력할 때 이름을 바꾸고 싶다면, as 명령어를 활용했다.
    join에서 이름을 바꾸고자 할 땐, 공백 뒤에 명명할 이름을 추가하면 된다.

    - join 사용법
    SELECT
        출력하고자 하는 데이터 AS 출력 시 명명할 데이터 이름        ==> (AS 명령어는 선택 사항)
        출력하고자 하는 데이터 AS 출력 시 명명할 데이터 이름        ==> (AS 명령어는 선택 사항)
        ....(그 밖에 추가 가능)
    FROM 활용할 좌측 테이블 데이터 (공백) 출력 시 명명할 테이블 이름         ==> (공백 뒤 명령어는 선택사항)
    INNER(LEFT OUTER or RIGHT OUTER) JOIN 활용할 우측 테이블 데이터 (공백) 출력 시 명명할 테이블 이름          ==> (공백 뒤 명령어는 선택사항)

    +) 셀프조인
    하나의 테이블 데이터만으로 출력해야 할 경우 활용한다.
    사람 간 관계를 출력할 때 주로 활용된다.

    예를 들면 상사&직원, 친구&친구 등의 관계가 있다.
    직원을 기준으로 상사가 누구인지 출력하는데, 하나의 테이블 데이터 안에 두 데이터 모두 존재할 때 활용한다.
    해당 셀프 조인의 사용법하기 위해서는 FROM과 JOIN 모두 같은 테이블 테이터를 넣는데,
    테이블명을 다르게 설정하여 left data와 right data에
    테이블 안 데이터는 같지만, 이름이 다른 테이블 데이터 2개를 활용한다.
    
    그렇다면 그냥 '같은 테이블 데이터에서 select로 두 값을 출력하면 되는 거 아닌가?' 라는 의문이 든다.
    하지만, 셀프 조인은 단순 출력이 아니라 '서로 연결된 관계' 를 직관적으로 출력하고자 할 때 꼭 필요하다.

    예를 들어
    SELECT empID, name, managerID 
    FROM employeeTBL;
    를 출력한다면
    직원의 상사를 찾을 수 있지만, 출력된 상사의 ID를 보고 직접 다시 찾아야 하는 어려움이 있다.

    이 때문에
    SELECT emp.name AS 직원명, mgr.name AS 상사명
    FROM employeeTBL emp
    LEFT JOIN employeeTBL mgr
    ON emp.managerID = mgr.empID;
    를 통해
    모든 직원 ID 데이터를 연결하여
    찾고자 하는 직원의 상사 이름을 연결된 ID를 통해 바로 상사 이름을 출력할 수 있다.